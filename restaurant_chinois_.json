{
  "name": "restaurant chinois",
  "nodes": [
    {
      "parameters": {
        "jsCode": "const restaurants = items[0].json.local_results;\nconst apiKey = 'AIzaSyDEPRHKae22_Hc2HnHqRvKocXKYeQRiXpw';\n\nlet html = `\n<!DOCTYPE html>\n<html lang=\"fr\">\n<head>\n  <meta charset=\"UTF-8\">\n  <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n  <title>Restaurants Chinois √† Antananarivo</title>\n  <link href=\"https://cdn.jsdelivr.net/npm/bootstrap@5.3.3/dist/css/bootstrap.min.css\" rel=\"stylesheet\">\n  <link href=\"https://cdnjs.cloudflare.com/ajax/libs/font-awesome/6.0.0-beta3/css/all.min.css\" rel=\"stylesheet\">\n  <style>\n    body {\n      background: #121212; /* Fond noir pour un effet sombre */\n      color: #fff; /* Texte blanc */\n      font-family: 'SF Pro Display', -apple-system, BlinkMacSystemFont, 'Segoe UI', Roboto, 'Helvetica Neue', Arial, sans-serif;\n      margin: 0;\n      padding: 0;\n    }\n\n    h1 {\n      font-weight: 900;\n      background: linear-gradient(90deg, #ffffff, #bdc3c7); /* Gradient du blanc vers un gris tr√®s clair */\n      -webkit-background-clip: text;\n      -webkit-text-fill-color: transparent;\n      text-align: center;\n      margin-top: 50px;\n      margin-bottom: 50px;\n      font-size: 3rem;\n    }\n\n    .card {\n      border: none;\n      border-radius: 20px;\n      background: #2c2c2c; /* Fond sombre pour les cartes */\n      box-shadow: 0px 10px 20px rgba(0, 0, 0, 0.2);\n      transition: transform 0.3s ease, box-shadow 0.3s ease;\n      opacity: 0;\n      transform: translateY(50px);\n      animation: fadeIn 0.5s forwards;\n    }\n\n    .card:hover {\n      transform: translateY(-5px);\n      box-shadow: 0px 20px 30px rgba(0, 0, 0, 0.25); /* Ombres plus prononc√©es */\n    }\n\n    @keyframes fadeIn {\n      to {\n        opacity: 1;\n        transform: translateY(0);\n      }\n    }\n\n    .card-body {\n      padding: 30px;\n      color: #ecf0f1; /* Texte clair pour le contraste */\n    }\n\n    .card-title {\n      font-size: 1.4rem;\n      font-weight: 700;\n      color: #ffffff; /* Titre en blanc */\n      margin-bottom: 15px;\n    }\n\n    .card-text {\n      color: #bdc3c7; /* Texte des d√©tails en gris clair */\n      font-size: 0.95rem;\n      line-height: 1.5;\n    }\n\n    .map {\n      height: 240px;\n      border-radius: 15px;\n      overflow: hidden;\n      margin-top: 20px;\n      border: 2px solid #555; /* Bordure sombre */\n      transition: border-color 0.3s ease;\n    }\n\n    .map:hover {\n      border-color: #fff; /* Bordure blanche lors du survol */\n    }\n\n    .container {\n      max-width: 1200px;\n      padding: 30px;\n    }\n\n    .restaurant-info {\n      font-size: 1rem;\n      margin-bottom: 10px;\n    }\n\n    .restaurant-info i {\n      color: #ffffff;\n    }\n\n    .restaurant-info span {\n      font-weight: 600;\n      color: #bdc3c7; /* Texte des d√©tails en gris clair */\n    }\n\n    .restaurant-info i, .restaurant-info span {\n      margin-right: 8px;\n    }\n  </style>\n</head>\n<body>\n  <div class=\"container py-5\">\n    <h1>üçú Restaurants Chinois √† Antananarivo</h1>\n    <div class=\"row\">\n`;\n\nrestaurants.forEach((restaurant, index) => {\n  const lat = restaurant.gps_coordinates?.latitude ?? -18.8792;\n  const lng = restaurant.gps_coordinates?.longitude ?? 47.5079;\n  const title = (restaurant.title || \"Sans nom\").replace(/\"/g, '&quot;');\n  const address = (restaurant.address || \"Non renseign√©e\").replace(/\"/g, '&quot;');\n  const phone = restaurant.phone || \"Non renseign√©\";\n  const rating = restaurant.rating || \"Non not√©\";\n\n  html += `\n    <div class=\"col-md-6 mb-4\">\n      <div class=\"card\">\n        <div class=\"card-body\">\n          <h5 class=\"card-title\">${title}</h5>\n          <p class=\"restaurant-info\">\n            <i class=\"fas fa-map-marker-alt\"></i> <span>üìç Adresse :</span> ${address}<br>\n            <i class=\"fas fa-phone-alt\"></i> <span>üìû Contact :</span> ${phone}<br>\n            <i class=\"fas fa-star\"></i> <span>‚≠ê Note :</span> ${rating}\n          </p>\n          <div id=\"map${index}\" class=\"map\"></div>\n        </div>\n      </div>\n    </div>\n  `;\n\n  // Fonction d'initialisation sp√©cifique √† chaque restaurant\n  html += `\n  <script>\n    function initMap${index}() {\n      const map${index} = new google.maps.Map(document.getElementById(\"map${index}\"), {\n        center: { lat: ${lat}, lng: ${lng} },\n        zoom: 16,\n        mapTypeId: 'roadmap'\n      });\n\n      const marker${index} = new google.maps.Marker({\n        position: { lat: ${lat}, lng: ${lng} },\n        map: map${index},\n        title: \"${title}\"\n      });\n\n      const infoWindow${index} = new google.maps.InfoWindow({\n        content: \"<strong>${title}</strong><br>${address}<br><br>üìû ${phone}\"\n      });\n\n      marker${index}.addListener(\"click\", function () {\n        infoWindow${index}.open(map${index}, marker${index});\n      });\n    }\n  </script>\n  `;\n});\n\n// Initialisation des cartes\nhtml += `\n    </div>\n  </div>\n  <script src=\"https://maps.googleapis.com/maps/api/js?key=${apiKey}&callback=initMaps\" async defer></script>\n  <script>\n    function initMaps() {\n      // Initialisation de chaque carte apr√®s le chargement du script\n      ${restaurants.map((_, index) => `initMap${index}();`).join('')}\n    }\n  </script>\n</body>\n</html>\n`;\n\n// Convertir en donn√©es binaires pour t√©l√©chargement\nreturn [\n  {\n    json: {},\n    binary: {\n      data: {\n        data: Buffer.from(html, 'utf-8').toString('base64'),\n        mimeType: 'text/html',\n        fileName: 'restaurants_chinois.html'\n      }\n    }\n  }\n];\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        200
      ],
      "id": "3d9b4bc7-7cee-41ff-a891-c9d42436ffac",
      "name": "Code"
    },
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -340,
        -20
      ],
      "id": "dc4b0e70-ed7a-4276-984a-4e883d0af2e0",
      "name": "When clicking ‚ÄòTest workflow‚Äô"
    },
    {
      "parameters": {
        "url": "https://serpapi.com/search?engine=google_maps&q=restaurant%20chinois&ll=@-18.8792,47.5079,15z&type=search&api_key=7a3bd60990c8b8551c29d7b31daafcce6d52f2c4466b3b149dd4afe5a34ea183",
        "sendHeaders": true,
        "headerParameters": {
          "parameters": [
            {
              "name": "User-Agent",
              "value": "n8n-workflow"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        160,
        280
      ],
      "id": "31053e65-ceb6-48a7-bbcb-dbbc10c22428",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "url": "https://overpass-api.de/api/interpreter?data=[out:json];node[\"cuisine\"=\"chinese\"](around:20000,-18.8792,47.5079);out;",
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        160,
        20
      ],
      "id": "13942eec-24db-4ad6-a347-03bce59e2802",
      "name": "HTTP Request3"
    },
    {
      "parameters": {
        "jsCode": "const data = items[0].json.elements;\n\nreturn data.map(el => ({\n  json: {\n    nom: el.tags.name || \"Inconnu\",\n    latitude: el.lat,\n    longitude: el.lon,\n    adresse: el.tags[\"addr:street\"] || \"N/A\",\n    telephone: el.tags[\"phone\"] || \"Non renseign√©\",\n    specialites: el.tags[\"cuisine\"] || \"Chinoise\",\n    lien_maps: `https://www.google.com/maps/@?api=1&map_action=pano&viewpoint=${el.lat},${el.lon}`\n  }\n}));\n"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        580,
        0
      ],
      "id": "48d76f06-568f-4415-b1f8-6f32e54536a9",
      "name": "Code4"
    }
  ],
  "pinData": {},
  "connections": {
    "Code": {
      "main": [
        []
      ]
    },
    "When clicking ‚ÄòTest workflow‚Äô": {
      "main": [
        [
          {
            "node": "HTTP Request3",
            "type": "main",
            "index": 0
          },
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request3": {
      "main": [
        [
          {
            "node": "Code4",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code4": {
      "main": [
        []
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "669fde9e-3e5e-415e-8677-15c9899cc555",
  "meta": {
    "templateCredsSetupCompleted": true,
    "instanceId": "3732ca71b0ba470019e4cef5db3a8b758f0d2801defd2e5a88342e00d57e6ed2"
  },
  "id": "qDY1Pujcucfgast0",
  "tags": []
}