{
  "name": "Restauration_chinois_Antananarivo",
  "nodes": [
    {
      "parameters": {},
      "type": "n8n-nodes-base.manualTrigger",
      "typeVersion": 1,
      "position": [
        -340,
        -20
      ],
      "id": "806287ea-2462-4a08-8945-60fe7ef776e5",
      "name": "When clicking ‘Test workflow’"
    },
    {
      "parameters": {
        "url": "https://serpapi.com/search.json?engine=google_maps&q=restaurant+chinois+antananarivo",
        "sendQuery": true,
        "queryParameters": {
          "parameters": [
            {
              "name": "query",
              "value": "restaurant chinois Antananarivo "
            },
            {
              "name": "key",
              "value": "7160fd124ad77a622daf4eb617fd112c13dfb3fdda044fdfc25df24d27430e0c"
            }
          ]
        },
        "options": {}
      },
      "type": "n8n-nodes-base.httpRequest",
      "typeVersion": 4.2,
      "position": [
        -140,
        -200
      ],
      "id": "7c66f1a9-c99b-45ce-aa79-606f2608165d",
      "name": "HTTP Request"
    },
    {
      "parameters": {
        "jsCode": "\nconst escapeHtml = (unsafe) => {\n  if (typeof unsafe !== 'string') return 'Non disponible';\n  return unsafe\n    .replace(/&/g, '&amp;')\n    .replace(/</g, '&lt;')\n    .replace(/>/g, '&gt;')\n    .replace(/\"/g, '&quot;')\n    .replace(/'/g, '&#039;');\n};\n\nconst result = items[0].json;\nif (result && Array.isArray(result.local_results)) {\n    const formattedData = result.local_results.map(place => {\n        return {\n            nom: place.title || \"Nom non disponible\",\n            place_id: place.place_id || \"ID non disponible\",\n            latitude: place.gps_coordinates ? place.gps_coordinates.latitude : \"Inconnu\",\n            longitude: place.gps_coordinates ? place.gps_coordinates.longitude : \"Inconnu\",\n            rating: place.rating ? place.rating.toString() : \"Non évalué\",\n            ouvert: place.open_state ? true : false,\n            total_avis: place.reviews || 0,\n            photo: place.thumbnail || null,\n            icone: place.serpapi_thumbnail || null,\n            telephone: place.phone || \"Non fourni\",\n            adresse_complète: place.address || \"Non fournie\",\n            horaires: place.hours || \"Non fournis\",\n            date: \"Non définie\",\n            time: \"Non définie\"\n        };\n    });\n\n    let htmlContent = `\n      <!DOCTYPE html>\n      <html lang=\"fr\">\n      <head>\n          <meta charset=\"UTF-8\">\n          <meta name=\"viewport\" content=\"width=device-width, initial-scale=1.0\">\n          <title>Liste des Restaurants</title>\n          <link href=\"https://fonts.googleapis.com/css2?family=Roboto:wght@400;500&display=swap\" rel=\"stylesheet\">\n          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.css\" />\n          <link rel=\"stylesheet\" href=\"https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.css\" />\n          <style>\n              body { font-family: 'Roboto', sans-serif; margin: 0; padding: 0; background-color: #f4f4f9; color: #333; }\n              .container { max-width: 900px; margin: 40px auto; padding: 20px; background-color: white; box-shadow: 0 4px 8px rgba(0, 0, 0, 0.1); border-radius: 8px; }\n              h1 { font-size: 2em; text-align: center; color: #333; margin-bottom: 30px; }\n              .restaurant { display: flex; flex-wrap: wrap; border-bottom: 1px solid #eee; padding: 20px 0; margin-bottom: 20px; position: relative; transition: transform 0.3s, box-shadow 0.3s; transform-style: preserve-3d; }\n              .restaurant:last-child { border-bottom: none; }\n              .restaurant:hover { transform: rotateX(5deg) rotateY(5deg) scale(1.02); box-shadow: 0 6px 12px rgba(0, 0, 0, 0.2); }\n              .restaurant img { width: 200px; height: 150px; object-fit: cover; border-radius: 5px; box-shadow: 0 4px 6px rgba(0, 0, 0, 0.1); }\n              .restaurant-info { flex: 1; padding-left: 20px; }\n              .restaurant-info h2 { font-size: 1.5em; margin-bottom: 10px; color: #2d2d2d; }\n              .restaurant-info p { margin: 5px 0; }\n              .map { height: 200px; width: 100%; margin-top: 10px; border-radius: 5px; }\n              .route-btn { margin-top: 10px; padding: 8px 16px; background-color: #007bff; color: white; border: none; border-radius: 5px; cursor: pointer; font-size: 0.9em; }\n              .route-btn:hover { background-color: #0056b3; }\n              .route-input { margin-top: 10px; display: none; }\n              .route-input input { margin-right: 5px; padding: 5px; }\n              @media screen and (max-width: 768px) {\n                  .restaurant { flex-direction: column; align-items: center; }\n                  .restaurant img { width: 100%; margin-bottom: 15px; }\n                  .restaurant-info { padding-left: 0; }\n                  .map { height: 150px; }\n              }\n          </style>\n      </head>\n      <body>\n          <div class=\"container\">\n              <h1>Liste des Restaurants</h1>\n    `;\n\n    formattedData.forEach((restaurant, index) => {\n        const latitude = restaurant.latitude;\n        const longitude = restaurant.longitude;\n        const safeNom = escapeHtml(restaurant.nom || 'Nom inconnu');\n        const safeAdresse = escapeHtml(restaurant.adresse_complète || 'Non disponible');\n        const safeTelephone = escapeHtml(restaurant.telephone || 'Non disponible');\n        const safeHoraires = escapeHtml(restaurant.horaires || 'Non fournis');\n\n        htmlContent += `\n            <div class=\"restaurant\">\n                <img src=\"${restaurant.photo && restaurant.photo !== 'Pas de photo disponible' ? escapeHtml(restaurant.photo) : 'https://via.placeholder.com/200x150'}\" alt=\"Photo de ${safeNom}\">\n                <div class=\"restaurant-info\">\n                    <h2>${safeNom}</h2>\n                    <p><strong>Adresse :</strong> ${safeAdresse}</p>\n                    <p><strong>Téléphone :</strong> ${safeTelephone}</p>\n                    <p><strong>Évaluation :</strong> ${restaurant.rating || 'Non évalué'}</p>\n                    <p><strong>Horaires :</strong> ${safeHoraires}</p>\n                    <p><strong>Nombre d'avis :</strong> ${restaurant.total_avis || 0}</p>\n                    ${latitude !== \"Inconnu\" && longitude !== \"Inconnu\" ? `\n                        <div class=\"map\" id=\"map-${index}\"></div>\n                        <button class=\"route-btn\" onclick=\"showRoute(${index}, ${latitude}, ${longitude})\">Voir l'itinéraire</button>\n                        <div class=\"route-input\" id=\"route-input-${index}\">\n                            <input type=\"text\" id=\"lat-input-${index}\" placeholder=\"Latitude (ex: 48.8566)\" />\n                            <input type=\"text\" id=\"lon-input-${index}\" placeholder=\"Longitude (ex: 2.3522)\" />\n                            <button onclick=\"manualRoute(${index}, ${latitude}, ${longitude})\">Tracer</button>\n                        </div>\n                    ` : ''}\n                </div>\n            </div>\n        `;\n    });\n\n    htmlContent += `\n          </div>\n          <script src=\"https://unpkg.com/leaflet@1.9.4/dist/leaflet.js\"></script>\n          <script src=\"https://unpkg.com/leaflet-routing-machine@latest/dist/leaflet-routing-machine.js\"></script>\n          <script>\n              const maps = {};\n              document.addEventListener('DOMContentLoaded', () => {\n                  ${formattedData.map((restaurant, index) => {\n                      const latitude = parseFloat(restaurant.latitude);\n                      const longitude = parseFloat(restaurant.longitude);\n                      if (!isNaN(latitude) && !isNaN(longitude)) {\n                          return `\n                              maps[${index}] = L.map('map-${index}').setView([${latitude}, ${longitude}], 13);\n                              L.tileLayer('https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png', {\n                                  attribution: '© <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\n                              }).addTo(maps[${index}]);\n                              L.marker([${latitude}, ${longitude}]).addTo(maps[${index}])\n                                  .bindPopup('${escapeHtml(restaurant.nom || 'Restaurant')}');\n                          `;\n                      }\n                      return '';\n                  }).join('')}\n              });\n\n              function showRoute(index, destLat, destLon) {\n                  if (navigator.geolocation) {\n                      navigator.geolocation.getCurrentPosition(\n                          position => {\n                              const userLat = position.coords.latitude;\n                              const userLon = position.coords.longitude;\n                              drawRoute(index, userLat, userLon, destLat, destLon);\n                          },\n                          error => {\n                              console.error('Erreur de géolocalisation:', error);\n                              document.getElementById('route-input-' + index).style.display = 'block';\n                          }\n                      );\n                  } else {\n                      document.getElementById('route-input-' + index).style.display = 'block';\n                  }\n              }\n\n              function manualRoute(index, destLat, destLon) {\n                  const userLat = parseFloat(document.getElementById('lat-input-' + index).value);\n                  const userLon = parseFloat(document.getElementById('lon-input-' + index).value);\n                  if (!isNaN(userLat) && !isNaN(userLon)) {\n                      drawRoute(index, userLat, userLon, destLat, destLon);\n                  } else {\n                      alert('Veuillez entrer des coordonnées valides.');\n                  }\n              }\n\n              function drawRoute(index, userLat, userLon, destLat, destLon) {\n                  if (maps[index].routingControl) {\n                      maps[index].routingControl.remove();\n                  }\n                  maps[index].routingControl = L.Routing.control({\n                      waypoints: [\n                          L.latLng(userLat, userLon),\n                          L.latLng(destLat, destLon)\n                      ],\n                      routeWhileDragging: true,\n                      show: false,\n                      addWaypoints: false\n                  }).addTo(maps[index]);\n              }\n          </script>\n      </body>\n      </html>\n    `;\n  \n    return [{\n        json: { fileName: 'restaurants.html' },\n        binary: {\n            data: {\n                data: Buffer.from(htmlContent).toString('base64'),\n                mimeType: 'text/html',\n                fileName: 'restaurants.html'\n            }\n        }\n    }];\n}"
      },
      "type": "n8n-nodes-base.code",
      "typeVersion": 2,
      "position": [
        80,
        -200
      ],
      "id": "26944b55-f790-4b92-a14f-59a6f28dc390",
      "name": "Code"
    },
    {
      "parameters": {
        "assignments": {
          "assignments": [
            {
              "id": "eb5670b7-1494-46fd-b374-1a4fd2af43f9",
              "name": "fileName",
              "value": "restauration.html",
              "type": "string"
            }
          ]
        },
        "includeOtherFields": true,
        "options": {}
      },
      "type": "n8n-nodes-base.set",
      "typeVersion": 3.4,
      "position": [
        300,
        -20
      ],
      "id": "fd12a186-b92e-4cb3-bcfc-c3da234ee180",
      "name": "Edit Fields"
    },
    {
      "parameters": {
        "operation": "write",
        "fileName": "={{ $json.fileName }}",
        "options": {}
      },
      "type": "n8n-nodes-base.readWriteFile",
      "typeVersion": 1,
      "position": [
        580,
        -20
      ],
      "id": "451ca512-7fb4-4678-812d-af9a4749dadc",
      "name": "Read/Write Files from Disk"
    }
  ],
  "pinData": {},
  "connections": {
    "When clicking ‘Test workflow’": {
      "main": [
        [
          {
            "node": "HTTP Request",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "HTTP Request": {
      "main": [
        [
          {
            "node": "Code",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Code": {
      "main": [
        [
          {
            "node": "Edit Fields",
            "type": "main",
            "index": 0
          }
        ]
      ]
    },
    "Edit Fields": {
      "main": [
        [
          {
            "node": "Read/Write Files from Disk",
            "type": "main",
            "index": 0
          }
        ]
      ]
    }
  },
  "active": false,
  "settings": {
    "executionOrder": "v1"
  },
  "versionId": "b53b5aa5-d81b-4e81-9f94-fea61d743916",
  "meta": {
    "instanceId": "101fbab14e8327117142a1cbcc31763ac18758edaaee8e56a2b000031e0211ef"
  },
  "id": "c5RB0zGx1JpMvzdn",
  "tags": []
}